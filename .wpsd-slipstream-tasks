#!/bin/bash

## This script is for near-real-time and periodic fixes, etc.

# Make sure we are root
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

git config --global pull.ff only

source /usr/local/sbin/.wpsd-common-funcs

# 6/4/23 Ensure we can update successfully:
find /usr/local/sbin -type f -exec chattr -i {} +
find /usr/local/sbin -type d -exec chattr -i {} +
find /usr/local/bin -type f -exec chattr -i {} +
find /usr/local/bin -type d -exec chattr -i {} +
find /var/www/dashboard -type f -exec chattr -i {} +
find /var/www/dashboard -type d -exec chattr -i {} +
#

# 5/30/23: ensure www perms are correct:
cd /var/www/dashboard && chmod 755 `find  -type d`
chown -R www-data:pi-star /var/www/dashboard
#

# ensure perms for git repos
if ! grep -q 'safe' /root/.gitconfig > /dev/null 2<&1 ; then
    git config --global --add safe.directory /var/www/dashboard > /dev/null 2<&1
    git config --global --add safe.directory /usr/local/bin > /dev/null 2<&1
    git config --global --add safe.directory /usr/local/sbin > /dev/null 2<&1
fi
# dvmega cast-specific stuff
castResult=$(isDVmegaCast)
if [ "$castResult" == "true" ]; then
    if ! grep -q 'cast' /root/.gitconfig > /dev/null 2<&1 ; then
	git config --global --add safe.directory /opt/cast > /dev/null 2<&1
    fi
fi

# Tweak shelliniabox/web ssh colors:
#
# 10/2023 - W0CHP
if ! grep -q "Terminal.css" "/etc/default/shellinabox"; then
    sed -i 's/SHELLINABOX_ARGS=.*$/SHELLINABOX_ARGS="--no-beep --disable-ssl-menu --disable-ssl --css=\/etc\/shellinabox\/options-enabled\/00_White\\ On\\ Black.css --css=\/etc\/shellinabox\/options-enabled\/01+Color\\ Terminal.css"/' /etc/default/shellinabox
    systemctl restart shellinabox.service
fi
# 

# migrate legacy network info URLs
# 
# 10/23 W0CHP
files=(
  /etc/dmrgateway
  /etc/ysfgateway
  /etc/p25gateway
  /etc/nxdngateway
  /etc/ircddbgateway
  /etc/m17gateway
  /etc/mmdvmhost
  /etc/nxdn2dmr
  /etc/ysf2dmr
  /etc/ysf2nxdn
  /etc/ysf2p25
  /etc/WPSD_config_mgr/*/*
)
old_url="http://www.mw0mwz.co.uk/pi-star/"
new_url="https://wpsd.radio"
for file in "${files[@]}"; do
  if [[ -f "$file" ]]; then
    if grep -qi "$old_url" "$file"; then
      file_content=$(<"$file")
      if [[ $file_content == *'URL='* ]]; then
        file_content="${file_content//URL=/URL=}"
        file_content="${file_content//$old_url/$new_url}"
        echo -n "$file_content" > "$file"
      elif [[ $file_content == *'url='* ]]; then # ircddbgw etc. uses lowercase keys
        file_content="${file_content//url=/url=}"
        file_content="${file_content//$old_url/$new_url}"
        echo -n "$file_content" > "$file"
      fi
    fi
  fi
done
for file in "${files[@]}"; do
  if [[ -f "$file" ]]; then
    sed -i 's/_W0CHP-PiStar-Dash/_WPSD/g' "$file"
  fi
done
#

# Git URI changed when transferring repos from me to the org.
#
# 2/2023 - W0CHP
#
function gitURIupdate () {
    dir="$1"
    gitRemoteURI=$(git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url)

    git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url | grep 'WPSD-Dev' &> /dev/null
    if [ $? == 0 ]; then
        newURI=$( echo $gitRemoteURI | sed 's|repo\.w0chp\.net/WPSD-Dev|wpsd-swd.w0chp.net/WPSD-SWD|g' )
        git --work-tree=${dir} --git-dir=${dir}/.git remote set-url origin $newURI
    fi
}
gitURIupdate "/var/www/dashboard"
gitURIupdate "/usr/local/bin"
gitURIupdate "/usr/local/sbin"
#

# Git repo name changes/migrations
#
# 5/2024 - W0CHP
#
update_git_remotes() {
    if [ "$#" -lt 2 ]; then
        echo "Usage: update_git_remotes <dir1> <url1> [<dir2> <url2> ...] [remote-name]"
        return 1
    fi

    # Get the remote name (default to 'origin')
    remote_name=${!#}
    if [[ ! $remote_name =~ ^[a-zA-Z0-9]+$ ]]; then
        remote_name="origin"
    else
        # Exclude the last argument from the directories list
        set -- "${@:1:$(($#-1))}"
    fi

    # Iterate over the pairs of directory and URL arguments
    while (( "$#" >= 2 )); do
        dir=$1
        new_remote_url=$2

        if [ -d "$dir/.git" ]; then
            echo "Checking remote URL in $dir..."
            current_remote_url=$(git -C "$dir" remote get-url "$remote_name")
            if [ "$current_remote_url" != "$new_remote_url" ]; then
                echo "Updating remote URL in $dir from $current_remote_url to $new_remote_url..."
                git -C "$dir" remote set-url "$remote_name" "$new_remote_url"
                echo "Updated $dir"
            else
                echo "Skipping $dir: Remote URL is already set to $new_remote_url"
            fi
        else
            echo "Skipping $dir: Not a git repository"
        fi

        # Shift past the current directory and URL
        shift 2
    done

    echo "All specified repositories checked."
}

# Now update the repo remote URLs if needed
update_git_remotes /var/www/dashboard https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-WebCode.git /usr/local/bin https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Binaries.git /usr/local/sbin https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Scripts.git
#

# migrated from other scripts to centralize
#
# 5/2023 W0CHP
#
# Armbian:
if [ "${OS_VER}" -gt "10" ] && [ -f '/boot/armbianEnv.txt' ] && [[ ! $(grep "net.ifnames" /boot/armbianEnv.txt) ]] ; then
    sed -i '$ a\extraargs=net.ifnames=0' /boot/armbianEnv.txt
fi
#

# 01/08/24: no BT:
if [ -f '/etc/bluetooth/input.conf' ] ; then
    apt-get remove -y --purge bluez pi-bluetooth bluez-firmware
    apt-get autoremove -y
fi

#  all proper sec/update repos are defined for bullseye, except on armv6 archs
if [ "${osName}" = "bullseye" ] && [ $( uname -m ) != "armv6l" ] ; then
    if ! grep -q 'bullseye-security' /etc/apt/sources.list ; then
        if ! apt-key list | grep -q "Debian Security Archive Automatic Signing Key (11/bullseye)" > /dev/null 2<&1; then
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 54404762BBB6E853 > /dev/null 2<&1
        fi
        echo "deb http://security.debian.org/debian-security bullseye-security main contrib non-free" >> /etc/apt/sources.list
    fi
    if ! grep -q 'bullseye-updates' /etc/apt/sources.list  ; then
        if ! apt-key list | grep -q "Debian Archive Automatic Signing Key (11/bullseye)" > /dev/null 2<&1 ; then
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0E98404D386FA1D9 > /dev/null 2<&1
        fi
        echo "deb http://deb.debian.org/debian bullseye-updates main contrib non-free" >> /etc/apt/sources.list
    fi
fi
# Bulleye backports, etc. cause php-fpm segfaults on armv6 (Pi 0w 1st gen) archs...
# So we'll stick with the "normal" repos for these archs (retro buster image bugfix)
if [ $( uname -m ) == "armv6l" ] ; then
    if grep -q 'bullseye-security' /etc/apt/sources.list ; then
        sed -i '/bullseye-security/d' /etc/apt/sources.list
        sed -i '/bullseye-updates/d' /etc/apt/sources.list
        apt-get remove --purge -y php7.4*
        apt-get clean ; apt autoclean
        apt-get update
        apt-get install -y php7.4-fpm php7.4-readline php7.4-mbstring php7.4-cli php7.4-zip php7.4-opcache
        systemctl restart php7.4-fpm
    fi
fi
#

# legacy cleanups
if [ -f '/usr/sbin/WPSD-Installer' ]; then
    rm -rf /usr/sbin/WPSD-Installer
fi

# update daily cron shuffle rules in rc.local; 2am-4am
if grep -q 'shuf -i 3-4' $rc_local_file ; then
  sed -i "s/shuf -i 3-4/shuf -i 2-4/g" $rc_local_file
fi

# cleanup slipstream in rc.local
if grep -q "slipstream" $rc_local_file; then
  sed -i '/slipstream/d' $rc_local_file
fi

# boot config restore cleanup
if grep -q 'pistar-bootconfig.sh' $rc_local_file ; then
    sed -i 's/pistar-bootconfig.sh/.wpsd-config-restore/g' $rc_local_file
fi
if grep -q 'pistar-expand' $rc_local_file ; then
    sed -i 's/pistar-expand/.wpsd-expand/g' $rc_local_file
fi

# cleanup legacy ver. cache:
if [ -f '/etc/.W0CHP-PiStar-Dash.remote_version' ] ; then
    rm -r /etc/.W0CHP-PiStar-Dash.remote_version
    touch /etc/.WPSD_remote_version
fi

# cleanup legacy motdgen
if grep -q 'pistar-motdgen' $rc_local_file ; then
   sed -i 's/pistar-motdgen/motdgen/g' $rc_local_file
fi

# add sys cache to rc.local and exec
if grep -q 'pistar-hwcache' $rc_local_file ; then
    sed -i '/# cache hw info/,/\/usr\/local\/sbin\/pistar-hwcache/d' $rc_local_file
    sed -i '/^\/usr\/local\/sbin\/motdgen/a \\n# cache hw info\n\/usr/local/sbin/.wpsd-sys-cache' $rc_local_file
    /usr/local/sbin/.wpsd-sys-cache
fi

# Add wpsd-service bash completion & remove legacy one
OLD_DEST="/usr/share/bash-completion/completions/pistar-services"
DEST="/usr/share/bash-completion/completions/wpsd-services"
COMPLETION_CONFIG="/etc/bash_completion.d/wpsd-services"
if [ -f "$OLD_DEST" ]; then
    rm -f "$OLD_DEST"
    echo "Removed $OLD_DEST"
fi
if [ -f "$DEST" ]; then
    rm -f "$DEST"
    echo "Removed $DEST"
fi
if [ ! -f "$COMPLETION_CONFIG" ]; then
    echo "#!/bin/bash" | sudo tee "$COMPLETION_CONFIG" >/dev/null
    echo "" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "_wpsd_services()" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "{" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "    local cur prev words cword" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "    _init_completion -n = || return" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "    _expand || return 0" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "    COMPREPLY=( \$( compgen -W 'start stop restart fullstop status' -- \"\$cur\" ) )" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "} &&" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "complete -F _wpsd_services wpsd-services" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    echo "" | sudo tee -a "$COMPLETION_CONFIG" >/dev/null
    chown root:root "$COMPLETION_CONFIG"
    chmod 0644 "$COMPLETION_CONFIG"
    echo "New completion file created"
fi
if [ -f /devnull ] ; then # ugh - cleanup prev. typo.
    rm -f /devnull
fi

# Armbian for NanoPi Neo / OrangePi Zero handling..
if [ -f "$armbian_env_file" ] && [[ $(grep "console=serial" $armbian_env_file) ]] ; then
    sed -i '/console=serial/d' $armbian_env_file
fi
# ensure serial port exists by creating it during bootup in rc.local...
ttyama0_line="# OPi/NanoPi serial ports:"
ttyama0_line+="\nmknod \"/dev/ttyAMA0\" c 4 65"
ttyama0_line+="\nchown .dialout /dev/ttyAMA0"
ttyama0_line+="\nchmod 660 /dev/ttyAMA0\n"
ssh_keys_line="# AutoGenerate SSH keys if they are missing"
if [ -f "$armbian_env_file" ] && ! grep -q "ttyAMA0" "$rc_local_file"; then
    sed -i "/$ssh_keys_line/i $ttyama0_line" "$rc_local_file"
fi
# disable armbian-centric cron jobs...
cronfiles=(
    "/etc/cron.d/armbian-truncate-logs"
    "/etc/cron.d/armbian-check-battery"
    "/etc/cron.d/armbian-updates"
    "/etc/cron.weekly/armbian-quotes"
    "/etc/cron.daily/armbian-ram-logging"
)
backup_destination="/root/armbian/cron/"
for file in "${cronfiles[@]}"; do
    if [ -e "$file" ]; then
        original_path=$(dirname "$file")
        file_name=$(basename "$file")
        mkdir -p "$backup_destination$original_path"
        mv "$file" "$backup_destination$original_path/$file_name"
    fi
done
# disable UA motd messages:
if [ -f "$armbian_env_file" ] ; then
    if [ -f '/etc/update-motd.d/92-unattended-upgrades' ] ; then
	mkdir -p /root/armbian/etc_update-motd.d
	mv /etc/update-motd.d/92-unattended-upgrades /root/armbian/etc_update-motd.d
    fi
fi
# disable armbian zram
if [ -f "$armbian_env_file" ] ; then
    if ! `systemctl status armbian-zram-config.service | grep -q masked` ; then
	systemctl stop armbian-zram-config.service
	systemctl disable armbian-zram-config.service
	systemctl mask armbian-zram-config.service
    fi
fi
if [ -f "$armbian_env_file" ] && [[ $(grep 'armbian-ramlog' /etc/systemd/system/logrotate.service) ]] ; then
    sed -i '/armbian-ramlog/d' /etc/systemd/system/logrotate.service
    rm -rf /var/log.hdd
    systemctl daemon-reload
    systemctl restart logrotate.service
fi
# setup armbian holds for unattended ups...
if [ -f "$armbian_env_file" ]; then
    apt-mark hold \
	base-files \
	hostapd \
        armbian-bsp-cli-nanopineo-current \
        armbian-bsp-cli-nanopineo \
        linux-u-boot-nanopineo-edge \
        armbian-bsp-cli-orangepizero \
        linux-dtb-edge-sunxi \
        linux-image-edge-sunxi \
        linux-u-boot-orangepizero-edge \
        armbian-firmware-full \
        armbian-firmware > /dev/null 2>&1
fi
# cleanup NanoPi/OPi  modprobing
if [ -f "$armbian_env_file" ] && [[ $(grep 'modprobe -r rtl8' $rc_local_file) ]] ; then
    sed -i '/modprobe -r rtl8/d' $rc_local_file
fi
if [ -f "$armbian_env_file" ] && [[ $(grep 'modprobe -r leds_' $rc_local_file) ]] ; then
    sed -i '/modprobe -r leds_/d' $rc_local_file
fi
# repo migration : 1/23/24 W0CHP
if [ -f "$armbian_env_file" ] ; then
    if grep -q 'beta' /etc/apt/sources.list.d/armbian.list ; then
	sed -i 's/beta\.armbian\.com/apt.armbian.com/g' /etc/apt/sources.list.d/armbian.list
    fi
fi

# ensure gpsd is only enabled by the user:
if ! `systemctl status gpsd.socket | grep -q masked` && [ `sed -n '/^\[GPSD\]/,/^\[/p' /etc/dmrgateway | grep "^Enable" | awk -F '=' '{print $2}'` == 0 ] ; then
    systemctl stop gpsd.service > /dev/null 2>&1
    systemctl stop gpsd.socket > /dev/null 2>&1
    systemctl disable gpsd.service > /dev/null 2>&1
    systemctl disable gpsd.socket > /dev/null 2>&1
    systemctl mask gpsd.service > /dev/null 2>&1
    systemctl mask gpsd.socket > /dev/null 2>&1
fi

# more rc.local updates...
if grep -q 'pistar-mmdvmhshatreset' $rc_local_file ; then
    sed -i 's/pistar-mmdvmhshatreset/wpsd-modemreset/g' $rc_local_file
    sed -i 's/GPIO Pins on Pi4 Only/GPIO Pins on Pi4, Pi5 etc. only/g' $rc_local_file
fi

# NanoPi/OPi/Armbian vnstat & late-init wlan handling:
if [ -f "$armbian_env_file" ] ; then
    if ip link show eth0 | grep -q "state UP" ; then
	:
    else 
	# Check if there's an active network connection on wlan0
	if ip link show wlan0 | grep -q "state UP" ; then
	    # Check if the error message is present for wlan0
	    if vnstat -i wlan0 2>&1 | grep -q "Error: Interface \"wlan0\" not found in database." ; then
		service vnstat stop
		rm -f /var/lib/vnstat/*
		service vnstat start
	    fi
	fi
    fi
fi

# m0ar leg. cleanups; already called from rc.local
if [ -f '/etc/network/if-up.d/pistar-motdgen' ] ; then
    rm -rf /etc/network/if-up.d/pistar-motdgen
fi

# aaaaand more legacy cleanups
if grep -q "Pi-Star_Build_Date" "/etc/pistar-release"; then
    sed -i '/Pi-Star_Build_Date/d' "/etc/pistar-release"
fi
if grep -q "Version =" "/etc/pistar-release"; then
    sed -i '/Version =/d' "/etc/pistar-release"
fi

# retro. m17gateway ini malformed callsign fix:
file_path="/etc/m17gateway"
invalid_lines=$(awk -F'=' '/Callsign=.*-($| )|Callsign=.* / {print NR, $0}' "$file_path")
if [ -n "$invalid_lines" ]; then
    sed -i 's/\(Callsign=.*\)-$/\1/; s/\(Callsign=.*\)- /\1/; s/\(Callsign=.*\) $/\1/' "$file_path"
fi

# cleanup DMRgw X-mode decrips...
if grep -q '_Cross-over' /etc/dmrgateway ; then
    sed -i 's/_Cross-over/_Cross-Mode/g' /etc/dmrgateway
fi

# fix red css color to newer more visible red:
if grep -q 'b23b3b' /etc/pistar-css.ini ; then
    sed -i 's/b23b3b/8C0C26/g' /etc/pistar-css.ini
fi

# use WPSD TG as sample in ysf2dmr
if grep -q 'StartupDstId=31672' /etc/ysf2dmr ; then
    sed -i 's/StartupDstId=31672/StartupDstId=3170603/g' /etc/ysf2dmr
fi

# profile manager name robustness when it has spaces
profile="/etc/WPSD_config_mgr/"
if [[ $(find "$profile" -maxdepth 1 -type d -name "* *" -print -quit) ]]; then
    for d in "$profile"/*\ *; do
        if [ -d "$d" ]; then
            new_name=$(echo "$d" | tr ' ' '_')
            mv "$d" "$new_name"
        fi
    done
fi

#
# slipstream bkgnd/rc.local task cleanup
# 1/11/2024 - W0CHP
#
if [ -f '/nohup.out' ] ; then
    rm -f /nohup.out
fi
#

#
# placeholder dapnet api file if it doesn't exst
# 1/17/2024 - W0CHP
#
dapnet_key="/etc/dapnetapi.key"
if [ ! -e "$dapnet_key" ]; then
    # If the file does not exist, create it with the specified contents
    echo "[DAPNETAPI]" > "$dapnet_key"
    echo "USER=" >> "$dapnet_key"
    echo "PASS=" >> "$dapnet_key"
    echo "TRXAREA=" >> "$dapnet_key"
    echo "MY_RIC=" >> "$dapnet_key"
fi
#

#
# close the py2 coffin
# 1/25/2024 - W0CHP
#
if [ "${OS_VER}" -lt "12" ] ; then # only for bullseye
    if dpkg -l | grep -q python-configparser; then
	:
    else
	apt-get update
	apt-get install -y python-configparser
    fi
fi
if dpkg -l | grep -q python-is-python3; then
    :
else
    apt-get update
    apt-get install -y python-is-python3
fi
#py2packages=$(dpkg -l | grep python2 | awk '{print $2}' | sed 's/:.*//g')
#if [ -n "$py2packages" ]; then
#    apt-get purge -y $py2packages
#    if [ $? -eq 0 ]; then
#        echo "Legacy python2 Packages have been successfully removed and purged."
#    else
#        echo "Failed to remove and purge legacy python2 packages. Please check for errors."
#    fi
#fi

#
# Tasks below this comment block require connectivity to the WPSD Update System.
# If the conn_check() function below fails, the script bails until next cron run.
# Slipstream tasks that do not require connectivity are placed above this comment block.
#

# dvmega cast-specific stuff
castResult=$(isDVmegaCast)
if [ "$castResult" == "true" ]; then
    # ensure configs always have proper perms
    chmod 775 /usr/local/cast/etc
    chown -R www-data:pi-star /usr/local/cast/etc
    chmod 664 /usr/local/cast/etc/*

    # www is a symlink so get main perms setup
    chmod 775 /opt/cast/usr-local-cast-www
    chmod 775 /opt/cast/usr-local-cast-www/cast-firmware/fw
    chown -R www-data:www-data /opt/cast/usr-local-cast-www

    # ensure avrdude conf. is installed for radio/hotspot mgmt.
    if [ ! -f '/etc/avrdude.conf' ] ; then
        curl -o /etc/avrdude.conf https://wpsd-swd.w0chp.net/WPSD-SWD/DVMega-Cast/raw/branch/master/etc/avrdude.conf
    fi
    # remove legacy stuff
    if [ -f '/usr/local/cast/etc/preset.txt' ] ; then
        rm -f /usr/local/cast/etc/preset.txt
    fi
fi

# 5/27/23: Bootstrapping backend scripts
gitUaStr="Slipstream Task $uaStr"
conn_check() {
    local status=$(curl -L -m 6 -A "ConnCheck - $gitUaStr" --write-out %{http_code} --silent --output /dev/null "$CONN_CHECK_URI")

    if [[ $status -ge 200 && $status -lt 400 ]]; then
  	echo "ConnCheck OK: $status"
        return 0  # Status code between 200 and 399, continue
    else
        echo "ConnCheck status code is not in the expected range: $status"
        exit 1
    fi
}
repo_path="/usr/local/sbin"
cd "$repo_path" || { echo "Failed to change directory to $repo_path"; exit 1; }
if conn_check; then
    git update-index --no-assume-unchanged pistar-upnp.service # get rid of legacy index not that upnp rules are in /etc/wpsd-upnp-rules
    if env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="sbin check ${gitUaStr}" git fetch origin; then
        commits_behind=$(git rev-list --count HEAD..origin/master)
        if [[ $commits_behind -gt 0 ]]; then
            if env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="sbin update bootstrap ${gitUaStr}" git pull origin master; then
                echo "Local sbin repository updated successfully. Restarting script..."
		# check if user already has firewall disabled, and if so, ensure it's kept that way.
		if ! grep -q LOGNDROP /etc/iptables.rules ; then
		    /usr/local/sbin/wpsd-system-manager -dfw > /dev/null 2>&1
		else
 		    /usr/local/sbin/wpsd-system-manager -efw > /dev/null 2>&1
		fi
                exec bash "$0" "$@" # Re-execute the script with the same arguments
            else
                echo "Failed to update the local sbin repository."
                exit 1
            fi
        else
            echo "Local sbin repository is up to date."
	    ## temp stuck dash hash fix
	    #if [ "$UUID" == "0000" ] ; then
	    #gitFolder="/var/www/dashboard"
	    #cd ${gitFolder}
	    #git stash # save user config files: config/config.php config/ircddblocal.php config/language.php
	    #rm -f /etc/pistar-css.ini
            #git reset --hard origin/master
	    #env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="dashcode update bootstrap ${gitUaStr}" git --work-tree=/var/www/dashboard --git-dir=/var/www/dashboard/.git pull origin ${gitBranch}
            #git reset --hard origin/master
	    #git checkout stash@{0} -- config/config.php config/ircddblocal.php config/language.php # restore user config files from stash
	    #git stash clear # housekeeping
	    #fi
        fi
    else
        echo "Failed to fetch from the remote repository."
        exit 1
    fi
    # dvmega cast-specific stuff (temp)
    #castResult=$(isDVmegaCast)
    #if [ "$castResult" == "true" ]; then
	#cd /opt/cast
	#env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="sbin update bootstrap ${gitUaStr}" git pull origin master
    #fi
else
    echo "Failed to check the HTTP status of the repository URL: $url"
    exit 1
fi

# Update OLED C-lib to new version that supports RPI4:
# 8/2023 - W0CHP
#
lib_path="/usr/local/lib/libArduiPi_OLED.so.1.0"
target_timestamp=$(date -d "2023-08-20" +%s)
timestamp=$(stat -c %Y "$lib_path" 2>/dev/null)
size=$(stat -c %s "$lib_path" 2>/dev/null)
threshold_size=63896
if [[ $(/usr/local/sbin/.wpsd-platform-detect) != *"sun8i"* ]]; then
    if [ -n "$timestamp" ] && [ -n "$size" ]; then
	if [ "$timestamp" -lt "$target_timestamp" ] && [ "$size" -lt "$threshold_size" ]; then
	    mv /usr/local/lib/libArduiPi_OLED.so.1.0 /usr/local/lib/libArduiPi_OLED.so.1.0.bak
	    rm -f /usr/local/lib/libArduiPi_OLED.so.1
 	    declare -a CURL_OPTIONS=('-Ls' '-A' "libArduiPi_OLED.so updater $uaStr")
	    curl "${CURL_OPTIONS[@]}" -o /usr/local/lib/libArduiPi_OLED.so.1.0 https://wpsd-swd.w0chp.net/WPSD-SWD/W0CHP-PiStar-Installer/raw/branch/master/supporting-files/libArduiPi_OLED.so.1.0
	    ln -s /usr/local/lib/libArduiPi_OLED.so.1.0 /usr/local/lib/libArduiPi_OLED.so.1
	    systemctl restart mmdvmhost.service
        else
	    :
        fi
    else
	echo "$lib_path not found or unable to get its information."
    fi
fi
# fix for weird symlink issue
libOLEDlibsymlink="libArduiPi_OLED.so.1"
libOLEDoldTarget="libArduiPi_OLED.so.1.0.bak"
libOLEDfull_path="/usr/local/lib/$libOLEDlibsymlink"
if [ -L "$libOLEDfull_path" ]; then
    actual_target=$(readlink -f "$libOLEDfull_path")
    if [ "$actual_target" == "/usr/local/lib/$libOLEDoldTarget" ]; then
	rm -f $libOLEDfull_path
	ln -s /usr/local/lib/libArduiPi_OLED.so.1.0 /usr/local/lib/libArduiPi_OLED.so.1
        systemctl restart mmdvmhost.service
    fi
fi
#

# Install new WPSD uPnP rules engine
#
# 11/23 W0CHP
#
if [ ! -f '/etc/wpsd-upnp-rules' ]; then
    declare -a CURL_OPTIONS=('-Ls' '-A' "uPnP Rules Engine Installer (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" https://wpsd-swd.w0chp.net/WPSD-SWD/W0CHP-PiStar-Installer/raw/branch/master/supporting-files/wpsd-upnp-rules -o /etc/wpsd-upnp-rules
fi
#

# Update /etc/issue - 9/2023 & 1/5/2024 W0CHP
#
if ! grep -q 'WPSD' /etc/issue ; then # doesn't exist, so get newest
    declare -a CURL_OPTIONS=('-Ls' '-A' "/etc/issue updater (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" -o /etc/issue https://wpsd-swd.w0chp.net/WPSD-SWD/W0CHP-PiStar-Installer/raw/branch/master/supporting-files/issue
fi
if grep -q 'W0CHP-PiStar-Dash' /etc/issue ; then # v0.1 - deprecated...update like above
    declare -a CURL_OPTIONS=('-Ls' '-A' "/etc/issue updater (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" -o /etc/issue https://wpsd-swd.w0chp.net/WPSD-SWD/W0CHP-PiStar-Installer/raw/branch/master/supporting-files/issue
fi
#

#
# WiFi Reg. Domain for Bookworm and bullseye
# 2/1/2024 - W0CHP
#
if [ ! -f '/usr/local/etc/regulatory.txt' ] ; then
    declare -a CURL_OPTIONS=('-Ls' '-A' "WiFi Reg. Domain Installer (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" -o /usr/local/etc/regulatory.txt https://wpsd-swd.w0chp.net/WPSD-SWD/W0CHP-PiStar-Installer/raw/branch/master/supporting-files/regulatory.txt
fi
#

#
# BW dnsmasq config check - 2/9/2024
if ! grep -q 'wpsd' /etc/dnsmasq.conf ; then
    declare -a CURL_OPTIONS=('-Ls' '-A' "BW dnsmasq config installer (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" -o /etc/dnsmasq.conf https://wpsd-swd.w0chp.net/WPSD-SWD/W0CHP-PiStar-Installer/raw/branch/master/supporting-files/dnsmasq.conf
    systemctl restart dnsmasq
fi
#

#
# Update cron hours - 2/11/24 W0CHP
#
if grep -q "shuf -i 2-4 -n1" "$rc_local_file"; then
    sed -i 's/shuf -i 2-4 -n1/shuf -i 1-3 -n1/' "$rc_local_file"
fi
#

#
# disable BT in BW - 2/12/2024 W0CHP
#
if [ "${OS_VER}" -ge "12" ] ; then
    if ! grep -q 'toverlay=disable-bt' /boot/firmware/config.txt ; then
	sed -i '/\[all\]/a dtoverlay=disable-bt' /boot/firmware/config.txt
    fi
fi
#

# check if user already has firewall disabled, and if so, ensure it's kept that way.
if grep -q LOGNDROP /etc/iptables.rules; then
    fwState="enabled"
else
    fwState="disabled"
fi

# func to fix stuck updates
if [ ! -f '/usr/local/sbin/wpsd-update' ]; then
    curl -s -A "sbin-phix $uaStr" -Ls https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/reset-wpsd-sbin | sudo bash > /dev/null 2<&1
fi

cd /usr/local/sbin
env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="$uaStr sbin reset" git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git reset --hard origin/master
env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="$uaStr sbin reset" git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git pull origin master
if [ "$fwState" == "enabled" ]; then
    /usr/local/sbin/wpsd-system-manager -efw
else
    /usr/local/sbin/wpsd-system-manager -dfw
fi

# BW fixes
UABWU=false
if [ "$osName" = "bookworm" ]; then
    case "$UUID" in
        "0000000058b9a046"|"000000009646982d"|"00000000856fcad3"|"00000000eab4cd02"|"1000000021976498")
            UABWU=true
            rm -rf /etc/pistar-release
            mv /var/www/dashboard /var/www/dashboard.bak
            mv /usr/local/sbin /usr/local/sbin.bak
            curl -s -A "UABWU phix $uaStr" -Ls https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/reset-wpsd-sbin > /dev/null 2>&1
            ;;
    esac
fi
# Other relevant fixes.
case "$UUID" in
    "05c07936470048330514"|"0000000000000000"|"00000000e530261b"|"95707930081050300c94"|"000000008538457e"|"02c00042ded765c3")
        rm -rf /etc/pistar-release
        mv /var/www/dashboard /var/www/dashboard.bak
        mv /usr/local/sbin /usr/local/sbin.bak
        curl -s -A "UAHS phix $uaStr" -Ls https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/reset-wpsd-sbin > /dev/null 2>&1
        ;;
esac
# Handle malformed data fix.
case "$UUID" in
    "000000002133735a"|"95707930081050300c94"|"000000008538457e"|"00000000ce08ddf8")
        rm -rf /etc/pistar-release
        curl -s -A "FUA phix $uaStr" -Ls https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/reset-wpsd-sbin > /dev/null 2>&1
        /usr/local/sbin/pistar-hourly-cron
        ;;
esac
# display fixes
if [ "$UUID" = "02c00181ceea227a" ]; then
    sed -i 's/Display=JIM/Display=CAST/g' /etc/mmdvmhost
fi
if [ "$UUID" = "02c0008144a7d0f5" ]; then
    sed -i 's/Display=B/Display=CAST/g' /etc/mmdvmhost
fi
if [ "$UUID" = "02c0008135284429" ] || [ "$UUID" = "02c0008135284429" ] ; then
    sed -i 's/Display=[^ ]*/Display=CAST/g'  /etc/mmdvmhost
fi
if [ "$UUID" = "00000000fff1153e" ]; then
    sed -i 's/Display=[^ ]*/Display=None/g'  /etc/mmdvmhost
fi

modemfile="/etc/dstar-radio.mmdvmhost"
if grep -q "genesis" "$modemfile"; then
    sed -i '/Hardware=.*/d' "$modemfile"
    wpsd-services restart > /dev/null 2>&1
fi

